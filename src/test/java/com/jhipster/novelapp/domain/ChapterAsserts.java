package com.jhipster.novelapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChapterAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterAllPropertiesEquals(Chapter expected, Chapter actual) {
        assertChapterAutoGeneratedPropertiesEquals(expected, actual);
        assertChapterAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterAllUpdatablePropertiesEquals(Chapter expected, Chapter actual) {
        assertChapterUpdatableFieldsEquals(expected, actual);
        assertChapterUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterAutoGeneratedPropertiesEquals(Chapter expected, Chapter actual) {
        assertThat(expected)
            .as("Verify Chapter auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterUpdatableFieldsEquals(Chapter expected, Chapter actual) {
        assertThat(expected)
            .as("Verify Chapter relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChapterUpdatableRelationshipsEquals(Chapter expected, Chapter actual) {
        assertThat(expected)
            .as("Verify Chapter relationships")
            .satisfies(e -> assertThat(e.getNovel()).as("check novel").isEqualTo(actual.getNovel()));
    }
}
